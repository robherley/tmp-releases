name: CI

on: [push, workflow_dispatch, pull_request]

# test
# lint
# build
# release if tags [needs: test, lint, build]
# deploy [needs: release]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - name: Run tests
        run: go test
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: ['linux', 'darwin', 'windows']
        arch: ['amd64', 'arm64']
    env:
      OUTPUT_BINARY: hello_${{ matrix.os }}_${{ matrix.arch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - name: Build ${{ matrix.os }}/${{ matrix.arch }}
        run: script/build -o $OUTPUT_BINARY
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
      - name: Set exec perms and add to gzip tarball
        run: |
          chmod +x ${{ env.OUTPUT_BINARY }}
          tar cvzf ${{ env.OUTPUT_BINARY }}.tar.gz ${{ env.OUTPUT_BINARY }}
      - name: Upload tarball
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.OUTPUT_BINARY }}
          path: ${{ env.OUTPUT_BINARY }}.tar.gz
          if-no-files-found: error
          retention-days: 1
  release:
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: startsWith(github.ref, 'refs/tags') # only run when tags pushed
    steps:
      - name: Download binaries
        uses: actions/download-artifact@v2
      - name: Make release
        uses: actions/github-script@v5
        with:
          script: |
            const tag_name = context.ref.replace("refs/tags/", "")
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name
            })

            core.exportVariable('RELEASE_ID', release.data.id)
      - name: Print files
        run: ls -laRh
      - name: Upload release assets
        uses: actions/github-script@v5
        with:
          script: |
            const fs = require('fs')
            const { readFile } = fs.promises

            const globber = await glob.create('**/hello_*.tar.gz')
            const paths = await globber.glob()

            const release_id = +env['RELEASE_ID']

            const files = paths.map(path => readFile(path))

            const rawfiles = await Promise.all(files)

            const uploads = rawfiles.map((data, i) => github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id,
              name: paths[i].split('/').reverse()[0],
              data
            }))

            await Promise.all(uploads)